                            Python java ocaml crystal
Memory Management
Type Checking
Exception Hnadling
Event-driven Server Support
Supporting Tools
TensorFlow Bindings

------------------------
Python
memory management
    count based reference gc
type checking
    dynamic, strongly
GIL, but asyncio
    asyncio and async http
json
    pip/etc
try catch
    support


Java
memory management
    nursery w/ mark and sweep
    https://www.journaldev.com/2856/java-jvm-memory-model-memory-management-in-java
type checking
    strongly and statically
singlethreaded, eventloop server 
    apache accepted project, https://github.com/rschildmeijer/deft
org.json
    json
try catch
    exceptions
    https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html
bindings
    more than others, but stil incomplete https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java

OCaml
memory management
    young/old w variant of mark and sweep
    https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora087.html
    https://realworldocaml.org/v1/en/html/understanding-the-garbage-collector.html
type checking
    statically, strongly
async.std - async functions
    deferred type to handle values that will be filled in later
    thread pool in the background
cohttp.async - async http requests
    https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html
exeptions
    async exceptions 
    trywith
    monitors
    https://realworldocaml.org/v1/en/html/error-handling.html#exceptions
yojson
    deal with json
uri
    deal with uri
bindings
    some available, https://github.com/LaurentMazare/tensorflow-ocaml/


Crystal
memory management
    Boehm-Demers-Weiser conservative garbage collector https://crystal-lang.org/2013/12/05/garbage-collector.html
type checking
    type inference, static
    https://crystal-lang.org/docs/syntax_and_semantics/type_inference.html
async
    single thread
    greenthreads/fibers perform async operations using eventloop
    https://crystal-lang.org/docs/guides/concurrency.html
exceptions
    raise and rescue
    https://crystal-lang.org/docs/syntax_and_semantics/exception_handling.html
json
    https://crystal-lang.org/api/0.23.1/JSON.html
server
    https://crystal-lang.org/api/0.23.1/TCPServer.html
Tensorflow bindings
    early stage
    https://github.com/fazibear/tensorflow.cr


-------------------------
Write an executive summary that compares the three al-ternate approaches to each other and to Python. 

The summary should be in 10-point font or larger and should be at most three pages. 

You can put references and appendixes in later pages, if there's not enough room on four pages: the appendixes should contain any source code or diagrams. 

Your summary should focus on the technologies' effects on ease of use, flexibility, generality, performance, reliability; thie idea is to explore the most-important technical challenges in doing the proposed rewrite. 

The summary should be suitable for software executives, that is, for readers who have some expertise in software, particularly in managing software developers, but who are not experts in Java or OCaml or your chosen language. 

Please keep the resources for written reports and oral presentations in mind, particularly its rubrics and its ad-vice for citations to sources that you consulted.
